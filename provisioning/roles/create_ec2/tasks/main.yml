---
# Tasks to create an ec2 instances

- name: Ensure security groups exist
  ec2_group:
    aws_access_key: '{{ aws_access_key}}'
    aws_secret_key: '{{ aws_secret_key }}'
    state: present
    name: '{{ item.name }}'
    description: '{{ item.description }}'
    region: '{{ ec2_region }}'
    rules: '{{ item.rules }}'
  when: ec2_security_groups
  with_items: ec2_security_groups

- name: Ensure keypair exists
  ec2_key:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    region: '{{ ec2_region }}'
    name: '{{ ec2_key_name }}'
    key_material: "{{ item }}"
  with_file: '{{ ec2_public_key }}'
  register: keypair

- name: Create/locate ec2 instance(s)
  ec2:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    region: '{{ ec2_region }}'
    instance_type: '{{ ec2_instance_type }}'
    instance_tags:
        Name: '{{ ec2_name_prefix }}-{{ item.description }}'
        ANSIBLE_INSTALL_METHOD: '{{ansible_install_method|default("nightly")}}'
    group: '{{ ec2_security_group }}'
    key_name: '{{ ec2_key_name }}'
    image: '{{ item.name }}'
    exact_count: 1
    count_tag:
        Name: '{{ ec2_name_prefix }}-{{ item.description }}'
        ANSIBLE_INSTALL_METHOD: '{{ansible_install_method|default("nightly")}}'
    wait: yes
    wait_timeout: 600
  register: ec2
  with_items: '{{ ec2_images }}'

# Despite using `wait` on the ec2 module, instances aren't accepting ssh
# connections immediately.  The following will ensure systems are ready for use
# before proceeding.
- name: Wait for instances to listen on port:22
  wait_for:
    state=started
    host={{ item.tagged_instances[0].public_dns_name }}
    port=22
  with_items: ec2.results
  when: ec2 is defined

- name: Eebug ec2
  debug: var=ec2
  when: ec2 is defined

- name: 'Add new host to in memory inventory'
  # add_host: name={{ ec2_name_prefix }}-{{ item.item.name }}
  add_host: name={{ item.tagged_instances[0].public_dns_name }}
     groups=cloud,ec2,{{ item.item.name }},{{item.item.groups|default('')}}
     ansible_ssh_user=centos
     ansible_ssh_host={{ item.tagged_instances[0].public_dns_name }}
     # ansible_ssh_private_key_file={{ ec2_keypair_private }}
  with_items: ec2.results
  when: ec2 is defined

- name: 'Add the new host to ec2_inventory file'
  shell: echo "{{ item.tagged_instances[0].public_dns_name }} ansible_ssh_user=centos">>ec2_inventory
  with_items: ec2.results
  when: ec2 is defined

# HACK: While sshd may be listening, it may not fully accept connections
# immediately
- pause: seconds=30
  when: ec2 is defined and ec2.changed
