---

- name: create the /etc/galaxy directory
  file: path=/etc/galaxy owner=root group=apache mode=0750 state=directory

- name: set /etc/galaxy permissions - development
  file: path=/etc/galaxy owner=root group=root mode=0755
  when: galaxy_env == "DEV"

# Install galaxy tarball
- name: make the sdist tar
  shell: make clean &>/dev/null && OFFICIAL={{ galaxy_official_build }} make sdist &>/dev/null  chdir="{{ galaxy_project_dir }}"
  when: galaxy_make_sdist

- name: check for existing tar file
  shell: ls -1 {{ galaxy_project_dir }}/dist/*.tar.gz 
  register: app_tar

- name: install the galaxy app
  pip: name={{ app_tar.stdout }}

- name: configure galaxy public/static directory
  file: path=/var/lib/galaxy/public/static state=directory mode=0755
  when: galaxy_env == "PROD"

- name: deploy settings file
  template: src=settings.py.j2 dest=/etc/galaxy/settings.py owner=root group=apache mode=0640

- name: set settings.py file permissions - development
  file: path=/etc/galaxy/settings.py owner=root mode=0644 group=root
  when: galaxy_env == "DEV"

- name: create the SECRET_KEY file
  command: >
    /usr/bin/python -c "import uuid; file('/etc/galaxy/SECRET_KEY', 'wb').write(uuid.uuid4().hex)" creates=/etc/galaxy/SECRET_KEY

- name: adjust SECRET_KEY permissions - production
  file: path=/etc/galaxy/SECRET_KEY state=file owner=root group=apache mode=0640
  when: galaxy_env == "PROD"

- name: adjust SECRET_KEY permissions - development
  file: path=/etc/galaxy/SECRET_KEY state=file owner=root group=root mode=0644
  when: galaxy_env == "DEV"

- name: deploy apache configuration file
  template: src=galaxy.conf.j2 dest=/etc/httpd/conf.d/galaxy.conf
  when: galaxy_env == "PROD"
  notify: restart apache

- name: start apache and make sure it is enabled at boot
  service: name=httpd state=running enabled=true
  when: galaxy_env == "PROD"

- name: start memcached and make sure it is enabled at boot
  service: name=memcached state=running enabled=true

- name: migrate sites
  command: galaxy-manage migrate sites --noinput
  ignore_errors: yes

- name: migrate account
  command: galaxy-manage migrate account --noinput
  ignore_errors: yes

- name: migrate the full application
  command: galaxy-manage migrate --noinput

- name: collect galaxy static files
  command: galaxy-manage collectstatic --clear --noinput
  when: galaxy_env == "PROD"

# semanage fcontext -a -t httpd_log_t "/var/log/galaxy(/.*)?"
# restorecon -R -v /var/log/galaxy

- name: fix galaxy log permissions
  file: path={{ galaxy_log_dir }} state=directory owner=apache group=apache recurse=yes seuser=system_u serole=object_r setype=httpd_log_t
  when: galaxy_env == "PROD"
