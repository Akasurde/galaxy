---

- name: "Get the list of database backups"
  s3:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    bucket: "{{ galaxy_bucket }}"
    prefix: "data"
    mode: "list"
  register: data_list

- name: "Show the name fo the file"
  debug: msg="{{ data_list.s3_keys[-1] }}"

- name: "Get the most recent backup"
  s3:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    bucket: "{{ galaxy_bucket }}"
    object: "{{ data_list.s3_keys[-1] }}"
    mode: get
    dest: "/tmp/{{ data_list.s3_keys[-1] | basename }}"
    overwrite: True

- name: "Unarchive the backup file"
  shell: gunzip -c "/tmp/{{ data_list.s3_keys[-1] | basename }}" | openssl enc -aes-256-cbc -d -a -pass pass:{{ galaxy_encryption_passwword }} >>/tmp/{{ data_list.s3_keys[-1] | basename | regex_replace('\.gz$','') }}

# The following tasks assume the postgresql role was already applied
- name: "Drop the galaxy database"
  postgresql_db: name=galaxy owner=galaxy state=absent

- name: "Create an empty galaxy database"
  postgresql_db: name=galaxy owner=galaxy state=present

# Prevent pg_restore from prompting for a password
- name: "Add galaxy user to pgpass file"
  lineinfile:
    dest: "~/.pgpass"
    state: present
    create: yes
    line: "{{ galaxy_postgresql_hostname }}:{{ galaxy_postgresql_port }}:{{ galaxy_postgresql_dbname }}:{{ galaxy_postgresql_username }}:{{ galaxy_postgresql_password }}"

- name: "Set pgpass permisssions"
  file: path=~/.pgpass mode=0600

# Assume we're importing the schema and data into an empty database
- name: "Import the backup"
  shell: pg_restore -Fc -U galaxy -d galaxy /tmp/{{ data_list.s3_keys[-1] | basename | regex_replace('\.gz$','') }}
  notify: restart postgres

- name: "Remove backup archive"
  file: path="/tmp/{{ data_list.s3_keys[-1] | basename }}" state=absent

- name: "Remove uncompressed backup archive"
  file: path="/tmp/{{ data_list.s3_keys[-1] | basename | regex_replace('\.gz$','') }}" state=absent

# Perform migrations
- name: "Make Migrations"
  command: galaxy-manage makemigrations --noinput

- name: "Apply Migrations"
  command: galaxy-manage migrate --fake-initial --noinput
